import logging

from aiogram import Router, F, types

from handlers.in_development import in_development
from keyboards.rules_menu import rules_menu_kb

rules_menu_router = Router()


@rules_menu_router.message(F.text == '–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è')
async def answers_cmd(message: types.Message):
    logging.info(f"User {message.from_user.id} selected '–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è'.")
    keyboard = rules_menu_kb()
    await message.answer(
        f"üî∂–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞\n"
        "–ó–≤–µ—Ä—Ç–∞—î–º–æ —É–≤–∞–≥—É, —â–æ –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∏–∫–ª—é—á–Ω–æ –∑ –º–µ—Ç–æ—é –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑–Ω–∞–Ω—å.\n"
        "–ü–æ—à—É–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –º–µ—Ç–æ—é –∞–Ω–∞–ª—ñ–∑—É –¥–æ–ø—É—â–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫.\n"
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º —Ç–∞ –ø–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—É–≤–æ—Ä–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!\n\n"
        "üî∂–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞—Ö–∏—Å—Ç –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—ó –ø–æ–∫—É–ø—Ü—è\n"
        "–ë–æ—Ç –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î, –Ω–µ –æ–±—Ä–æ–±–ª—é—î —Ç–∞ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î –∂–æ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! \n"
        "–£—Å—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –∫–∞—Ä—Ç –æ–±—Ä–æ–±–ª—é—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–ª–∞—Ç—ñ–∂–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é ¬´Fondy¬ª —Ç–∞ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–º. \n"
        "–£—Å—ñ –¥–∞–Ω—ñ –ø–æ–∫—É–ø—Ü—è, —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ—Ä–µ–∂—É - –Ω–∞–¥—ñ–π–Ω–æ –∑–∞—Ö–∏—â–µ–Ω—ñ —Ç–∞ —à–∏—Ñ—Ä—É—é—Ç—å—Å—è. \n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ - –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —É–≤–µ—Å—å –ø–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥, –∞ —Ç–∞–∫–æ–∂ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –≤–∞–º –±—É–ª–∏ –Ω–∞–¥–∞–Ω—ñ VIP-–ø–æ—Å–ª—É–≥–∏.\n\n"
        "üî∂–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏ - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É \n"
        "\"–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—Éüñç\" –Ω–∏–∂—á–µ, –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º —É –≤—ñ–¥–¥—ñ–ª –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–∞ –ø–æ—à—Ç—É questions.nputest@gmail.com",
        reply_markup=keyboard
    )


@rules_menu_router.message(F.text == '–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì')
async def answers_cmd(message: types.Message):
    logging.info(f"User {message.from_user.id} selected '–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì'.")
    keyboard = rules_menu_kb()
    await in_development(message)


@rules_menu_router.message(F.text == '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—Éüñç')
async def answers_cmd(message: types.Message):
    logging.info(f"User {message.from_user.id} selected '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—Éüñç'.")
    keyboard = rules_menu_kb()
    await in_development(message)
