# import os
# from aiogram import types, Router, F
# from aiogram.filters import CommandStart, Command
# from aiogram.types import FSInputFile
# from bot_instance import bot
# import logging
#
# # Setting up logging
# logging.basicConfig(level=logging.INFO)
#
# user_private_router = Router()
#
#
# # Function to create the main menu keyboard
# def create_main_menu_keyboard():
#     kb = [
#         [
#             types.KeyboardButton(text="–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è"),
#             types.KeyboardButton(text="–ü–æ—à—É–∫ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π"),
#         ],
#         [
#             types.KeyboardButton(text="–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –º–æ—î—ó –ø—ñ–¥–ø–∏—Å–∫–∏"),
#             types.KeyboardButton(text="–ü—Ä–∏–¥–±–∞—Ç–∏ VIP –¥–æ—Å—Ç—É–ø"),
#         ],
#         [types.KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")]
#     ]
#     return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#
#
# # Main menu function
# async def main_menu(message: types.Message):
#     keyboard = create_main_menu_keyboard()
#     await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)
#
#
# # Combined handler for /start and /menu commands
# @user_private_router.message(CommandStart())
# @user_private_router.message(Command('menu'))
# async def start_cmd(message: types.Message):
#     video_path = 'D:/Python/Django/Projects/Telegram_bot/content/video.mp4'
#     logging.info(f"User {message.from_user.id} started the bot with /start or /menu.")
#
#     # Send video if the file exists
#     try:
#         if os.path.exists(video_path):
#             video = FSInputFile(video_path, filename='video.mp4')
#             await bot.send_video(chat_id=message.chat.id, video=video)
#     except Exception as e:
#         logging.error(f"Error sending video: {e}")
#
#     # Welcome message
#     await message.answer(
#         f"{message.from_user.first_name}, –≤—ñ—Ç–∞—î–º–æ!\n"
#         "–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —Ä–æ–∑–¥—ñ–ª–æ–º \"–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è\".\n"
#         "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞–¥–∞—î –≤–∞–º –ø–æ—à—É–∫ —É —Ç–µ–º—ñ \"–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ\".\n"
#         "–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É –¥—Ä—É–∑—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–≤–æ–≥–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!"
#     )
#
#     # Go to main menu
#     await main_menu(message)
#
#
# # Handler for '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è' button
# @user_private_router.message(F.text == '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
# async def testing_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è'.")
#     kb = [
#         [types.KeyboardButton(text='–í–∏–¥–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')],
#         [types.KeyboardButton(text='–£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')]
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#     await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
#
#
# # Handler for '–ü–æ—à—É–∫ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π' button
# @user_private_router.message(F.text == '–ü–æ—à—É–∫ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π')
# async def answers_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–ü–æ—à—É–∫ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π'.")
#     kb = [
#         [
#             types.KeyboardButton(text='–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'),
#             types.KeyboardButton(text='–í–æ–≥–Ω–µ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
#         ],
#         [
#             types.KeyboardButton(text='–¢–∞–∫—Ç–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'),
#             types.KeyboardButton(text='–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
#         ],
#         [
#             types.KeyboardButton(text='–£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
#         ]
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#     await message.answer('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=keyboard)
#
#
# # Handler for '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' button
# @user_private_router.message(F.text == '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
# async def answers1_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'.")
#     kb = [
#         [types.KeyboardButton(text='–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ')],
#         [types.KeyboardButton(text='–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')],
#         [types.KeyboardButton(text='–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')],
#         [types.KeyboardButton(text='–ù–∞–∑–∞–¥')]  # Back button to go to '–ü–æ—à—É–∫ –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π'
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
#     await message.answer('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=keyboard)
#
#
# # Handler for '–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ' button
# @user_private_router.message(F.text == '–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ')
# async def safety_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ'.")
#     await message.answer(
#         "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞üîé\n–£–≤–∞–≥–∞! –î–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é")
#
#
# # Handler for '–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' button
# @user_private_router.message(F.text == '–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
# async def medical_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'.")
#     await message.answer(
#         "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞üîé\n–£–≤–∞–≥–∞! –î–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é")
#
#
# # Handler for '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' button
# @user_private_router.message(F.text == '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
# async def psychology_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'.")
#     await message.answer(
#         "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞üîé\n–£–≤–∞–≥–∞! –î–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é")
#
#
# # Handler for '–ù–∞–∑–∞–¥' button in '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' submenu
# @user_private_router.message(F.text == '–ù–∞–∑–∞–¥')
# async def back_to_answers_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} selected '–ù–∞–∑–∞–¥' in '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'.")
#     await answers_cmd(message)  # Calls the 'answers_cmd' function to return to the previous menu
#
#
# # Handler to go back to the main menu
# @user_private_router.message(F.text.in_(['–£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', '–ú–µ–Ω—é']))
# async def back_to_main_menu(message: types.Message):
#     logging.info(f"User {message.from_user.id} returned to the main menu.")
#     await main_menu(message)
#
#
# # About command
# @user_private_router.message(Command('about'))
# async def about_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} requested 'about' info.")
#     await message.answer("its about us")
#
#
# # Payment command
# @user_private_router.message(Command('payment'))
# async def payment_cmd(message: types.Message):
#     logging.info(f"User {message.from_user.id} requested 'payment' info.")
#     await message.answer("its about payment")
