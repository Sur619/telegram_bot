from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import GeneralTraining, TacticalTraining
from handlers.serarch_in_db import search_in_table
from keyboards.answers_menu import general_training_kb, tactical_training_kb, answers_menu_kb
from keyboards.keyboard_for_search import create_keyboard
import logging

router = Router()

# –ö–∞—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
MODEL_MAP = {
    "–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞": (GeneralTraining, general_training_kb),
    "–¢–∞–∫—Ç–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞": (TacticalTraining, tactical_training_kb),
}


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
class SearchState(StatesGroup):
    active_model = State()
    selected_option = State()  # –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
@router.message(F.text.in_(MODEL_MAP.keys()))
async def select_section(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    model, kb_func = MODEL_MAP[message.text]
    await state.update_data(active_model=model, selected_option=None)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"User {message.from_user.id} selected section: {message.text}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = kb_func()
    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–¥—ñ–ª '{message.text}'. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞
@router.message(
    F.text.in_(["–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ", "–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞", "–¢–∞–∫—Ç–∏–∫–∞ –¥—ñ–π"])
)
async def process_selected_option(message: types.Message, state: FSMContext):
    selected_option = message.text
    await state.update_data(selected_option=selected_option)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
    logging.info(f"User {message.from_user.id} selected option: {selected_option}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    data = await state.get_data()
    active_model = data.get("active_model")
    if not active_model:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º.", reply_markup=types.ReplyKeyboardRemove())
        return

    keyboard = general_training_kb(selected_option) if active_model == GeneralTraining else tactical_training_kb(
        selected_option)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞üîé\n"
        "–£–≤–∞–≥–∞! –î–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥‚óÄÔ∏è"
@router.message(F.text == '–ù–∞–∑–∞–¥‚óÄÔ∏è')
async def go_back(message: types.Message):
    keyboard = answers_menu_kb()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    logging.info(f"User {message.from_user.id} returned to the main menu.")
    await message.answer('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text)
async def search_questions(message: types.Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    active_model = data.get("active_model")
    if not active_model:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º.", reply_markup=types.ReplyKeyboardRemove())
        return

    query = message.text
    logging.info(f"User {message.from_user.id} searching for '{query}' in {active_model.__name__}.")
    results = await search_in_table(session, active_model, query)

    if results:
        keyboard = await create_keyboard(results)
        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—à—É–∫—É:", reply_markup=keyboard)
    else:
        await message.answer("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
