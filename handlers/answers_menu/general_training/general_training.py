from aiogram import Router, types, F
from keyboards.answers_menu import general_training_kb, answers_menu_kb
import logging
from aiogram.types import CallbackQuery

general_training_router = Router()


# Handler for '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' button
@general_training_router.message(F.text == '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞')
async def general_training(message: types.Message):
    logging.info(f"User {message.from_user.id} selected '–ó–∞–≥–∞–ª—å–Ω–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'.")
    keyboard = general_training_kb()
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
@general_training_router.message(
    F.text.in_(["–ë–µ–∑–ø–µ–∫–∞ –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ", "–î–æ–º–µ–¥–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞"]))
async def process_answer(message: types.Message):
    selected_option = message.text
    logging.info(f"User {message.from_user.id} selected '{selected_option}'.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–µ–π
    keyboard = general_training_kb(selected_option)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞üîé\n"
        "–£–≤–∞–≥–∞! –î–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@general_training_router.message(F.text == '–ù–∞–∑–∞–¥‚óÄÔ∏è')
async def go_back(message: types.Message):
    logging.info(f"User {message.from_user.id} selected '–ù–∞–∑–∞–¥'.")
    # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    keyboard = answers_menu_kb()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=keyboard)
